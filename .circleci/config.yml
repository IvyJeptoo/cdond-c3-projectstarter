version: 2.1

orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert

docker_image1: &node_image
  docker:
      - image: circleci/node:13.8.0
docker_image3: &aws_image
  docker:
      - image: amazon/aws-cli
docker_image4: &ansible_image
  docker:
      - image: python:3.7-alpine3.16





jobs:
  build-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  

  build-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run build

  test-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run build

  scan-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm update js-yaml --depth 4

  scan-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix
            npm update path-parse --depth 3

  deploy-infrastructure:
    <<: *aws_image
    steps:
      - checkout
      - run:
          name: Ensure that the back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              exit_code=$?
              if [[ $exit_code == 0  ||  $exit_code == 255 ]]; 
                then
                    exit 0
                else
                    exit 1
                fi
      - run:
          name: Ensure that the front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              exit_code=$?
              if [[ $exit_code == 0  ||  $exit_code == 255 ]]; 
                then
                    exit 0
                else
                    exit 1
                fi
      - run:
          name: install tar & gzip utility
          command: yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query  'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - revert-migrations
  
  configure-infrastructure:
    <<: *ansible_image
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["74:bd:76:49:ec:ae:5e:44:75:cd:61:4c:a5:eb:49:9c"]
      - attach workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add ansible gzip openssh-client
            
      - run:
          name: Configure server
          command: |
           echo ENVIRONMENT=production > backend/.env
           echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
           echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
           echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
           echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
           echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
           echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
           cat backend/.env
           cd .circleci/ansible
           ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      - revert-migrations

      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      
            