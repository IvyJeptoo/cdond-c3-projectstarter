version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.2


commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      Workflow_ID:
        description: The ID used to create bucket and stacks
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            export TERM=ansi #Fixed: WARNING: terminal is not fully functional
            # Delete objects in S3 bucket
            aws s3 rm "s3://udapeople-<<parameters.Workflow_ID>>" --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name \
              "stack-frontend-<<parameters.Workflow_ID>>"  

            # Delete backend stack
            aws cloudformation delete-stack --stack-name \
              "stack-backend-<<parameters.Workflow_ID>>" 
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      Workflow_ID:
        description: The ID used to create bucket and stacks
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
  

  setup-backend-environment-variables:
    description: Setup environment variables in "backend/.env" file
    steps:
      - run:
          name: Add env variables to "backend/.env" file
          working_directory: backend
          command: |
            echo "ENVIRONMENT=production" >> .env
            echo "NODE_ENV=production" >> .env
            echo "TYPEORM_CONNECTION=postgres" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> .env
            echo "TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts" >> .env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> .env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> .env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> .env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> .env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> .env


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build--v1]
      - run:
          name: Build front-end
          working_directory: frontend
          command: |
            # Your code here
            npm install
            npm run-script build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build--v1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build--v1]
      - run:
          name: Back-end build
          working_directory: backend
          command: |
            # Your code here
             npm install
             npm run-script build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build--v1

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout      
      # Restore from cache
      - restore_cache:
          keys: [frontend-build--v1]
      # Your job code here
      - run:
          name: Test front-end
          working_directory: frontend
          command: |
            npm install
            # Test suite was failing because of: Cannot find module 'oauth-sign'
            npm install oauth-sign
            npm run-script build
            npm run-script test    
      
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout        
      - restore_cache:
          keys: [backend-build--v1]      
      - run:
          name: Test backend-end
          working_directory: backend
          command: |
            npm install
            npm run-script build
            npm run-script test 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout        
      - restore_cache:
          keys: [frontend-build--v1]      
      - run:
          name: Scan front-end
          working_directory: frontend
          command: |
            npm install
            npm audit fix --audit-level=critical --force


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0      
    steps:
      # Checkout code from git
      - checkout        
      # Restore from cache
      - restore_cache:
          keys: [backend-build--v1]   
      # Your job code here
      - run:
          name: Scan back-end
          working_directory: backend
          command: |
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/python:3.10
    steps:
     
      - checkout
      - install_awscli
      - install_ansible
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: .circleci/files
          command: |
            echo "Deploying backend..."
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "stack-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags "project=udapeople" "workflow_id=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: .circleci/files
          command: |
            echo "Deploying frontend..."
             aws cloudformation deploy \
               --template-file frontend.yml \
               --stack-name "stack-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --tags "project=udapeople"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations 

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.10
      # - image: circleci/node:13.8.0
    steps:
     
      # Checkout code from git
      - checkout
      - install_ansible
      - install_awscli
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["9b:01:f0:ad:d7:c6:41:10:20:9c:79:24:de:89:25:13"] 
      # attach workspace
      - attach_workspace:
          at: ~/      
      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:14.18.1
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-deps]  
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/TVK4hrWfDKf1pxuUErm4bB/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations is are pending" 
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations  

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      - aws-cli/setup
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            echo "All dependencies already installed!"
      - attach_workspace:
          # Here we have inventory.txt
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(grep -v "web" .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            echo "---API_URL---"
            cat frontend/.env
            echo "---API_URL---"
      - restore_cache:
          keys: [frontend-build--v1]
      - run:
          name: Build frontend one last time
          working_directory: frontend 
          command: |
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          working_directory: frontend
          command: |
            # your code here
            aws s3 sync dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --delete
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations 

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/node:13.8.0
    steps:
      - aws-cli/setup
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["9b:01:f0:ad:d7:c6:41:10:20:9c:79:24:de:89:25:13"]       
      # attach workspace
      - attach_workspace:
          at: ~/         
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt -yq install python3 ansible
      - restore_cache:
          keys: [backend-build--v1]
      - setup-backend-environment-variables      
      - run:
          name: Get a fresh backend build
          working_directory: backend
          command: |
            # Your code here
            npm install
            npm run-script build                 
      - run:
          name: Deploy backend
          command: |
            # your code here
            tar -C backend -czf \
              .circleci/ansible/roles/deploy/files/backend-artifact.tar.gz .
            export ANSIBLE_HOST_KEY_CHECKING=False  
            ansible-playbook -i .circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml  
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: amazon/aws-cli
      # - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -            
            yum -y install tar gzip git curl nodejs
      # Checkout code from git
      - checkout            
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
            echo "---FRONTEND_URL---"
            echo "${FRONTEND_URL}"
            echo "---FRONTEND_URL---"
            if curl -s $FRONTEND_URL | grep "Welcome"
            then
              echo "Frontend: up and running!!!"
              exit 0
            else
              echo "Frontend: it seems it is not running..."
              exit 1
            fi            
      - attach_workspace:
          # Here we have inventory.txt
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(grep -v "web" .circleci/ansible/inventory.txt)
            BACKEND_STATUS_URL="http://${BACKEND_IP}:3030/api/status"
            echo $BACKEND_STATUS_URL > ~/backend-url.txt
            echo "---BACKEND_STATUS_URL---"
            echo "${BACKEND_STATUS_URL}"
            echo "---BACKEND_STATUS_URL---"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            BACKEND_STATUS_URL=$(cat ~/backend-url.txt)
            if curl -s $BACKEND_STATUS_URL | grep "ok"
            then
              echo "Backend: up and running!!!"
              exit 0
            else
              echo "Backend: it seems it is not running..."
              exit 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: circleci/node:13.8.0
    steps:
      - aws-cli/setup    
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            echo "All dependencies already installed..."
      - run:
          name: Save old workflow ID
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text > ~/old_workflow_id.txt
            echo "---OLD_WORKFLOW_ID---"  
            cat ~/old_workflow_id.txt
            echo "---OLD_WORKFLOW_ID---"
      - persist_to_workspace:
          root: ~/
          paths:
            - old_workflow_id.txt      
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags "project=udapeople"
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        - run:
            name: Install dependencies
            command: |
              yum -y install tar gzip git      
        # Checkout code from git
        - checkout
        - attach_workspace:
            # Here we have saved old_workflow_id.txt
            at: ~/      
      
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(cat ~/old_workflow_id.txt)
              echo "---OldWorkflowID---"
              echo "$OldWorkflowID"
              echo "---OldWorkflowID---"
              export TERM=ansi #Fixed: WARNING: terminal is not fully functional
              # Delete objects in OLD S3 bucket
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              # Delete OLD frontend stack
              aws cloudformation delete-stack --stack-name \
                "stack-frontend-${OldWorkflowID}"  
              # Delete OLD backend stack
              aws cloudformation delete-stack --stack-name \
                "stack-backend-${OldWorkflowID}" 
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]               
          filters:
            branches:
              # only: [circleci-project-setup]
              only: [development]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

      
     
      

